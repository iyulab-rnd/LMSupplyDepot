# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'hostapp_v*'  # e.g., hostapp_v0.1.0

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Debug project structure
      run: |
        echo "Current directory contents:"
        Get-ChildItem -Path . -Recurse -Name "*.csproj" | Where-Object { $_ -like "*HostApp*" }
        echo "Checking src directory:"
        Get-ChildItem -Path "src/" -Recurse -Name "*.csproj" | Where-Object { $_ -like "*HostApp*" }
      shell: powershell
        
    - name: Restore dependencies
      run: dotnet restore src/
      
    - name: Build and Publish
      run: |
        dotnet publish src/LMSupplyDepots.HostApp/LMSupplyDepots.HostApp.csproj `
          -c Release `
          -o output/host-app
    
    - name: Get version from tag
      id: version
      run: |
        $tag = $env:GITHUB_REF -replace 'refs/tags/', ''
        if ($tag -match '^hostapp_v(.+)$') {
          $version = $matches[1]
        } elseif ($tag -match '^v(.+)$') {
          $version = $matches[1]
        } else {
          $version = $tag
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "TAG=$tag" >> $env:GITHUB_OUTPUT
        echo "Version: $version, Tag: $tag"
      shell: powershell
      
    - name: Create ZIP archive
      id: zip
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $zipFile = "LMSupplyDepots.HostApp-v$version-win-x64.zip"
        Compress-Archive -Path "output/host-app/*" -DestinationPath $zipFile -Force
        echo "ZIP_FILE=$zipFile" >> $env:GITHUB_OUTPUT
        echo "Created ZIP: $zipFile"
      shell: powershell
      
    - name: Generate Release Notes
      id: notes
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $notes = @"
        ## LMSupplyDepots HostApp v$version
        
        ### Download
        - **Windows x64**: LMSupplyDepots.HostApp-v$version-win-x64.zip
        
        ### Installation Instructions
        1. Download and extract the ZIP file
        2. Run ``LMSupplyDepots.HostApp.exe``
        
        ### System Requirements
        - Windows 10/11 (x64 architecture)
        - .NET 9.0 Runtime required
        
        ### What's New
        - Latest code changes and improvements
        - Bug fixes and stability enhancements
        - Performance optimizations
        
        ### Support
        If you encounter any issues, please create an issue in this repository.
        "@
        
        # Write to file with proper encoding
        [System.IO.File]::WriteAllText("release_notes.txt", $notes, [System.Text.UTF8Encoding]::new($false))
        
        # Set output for GitHub Actions
        echo "RELEASE_NOTES<<EOF" >> $env:GITHUB_OUTPUT
        Get-Content -Path release_notes.txt -Raw | ForEach-Object { $_ -split "`n" } | ForEach-Object { echo $_ >> $env:GITHUB_OUTPUT }
        echo "EOF" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Delete existing release if exists
      continue-on-error: true
      run: |
        $tag = "${{ steps.version.outputs.TAG }}"
        try {
          gh release delete $tag --yes --cleanup-tag
          echo "Deleted existing release: $tag"
        } catch {
          echo "No existing release found or deletion failed (this is normal for new releases)"
        }
      shell: powershell
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.TAG }}
        name: LMSupplyDepots HostApp v${{ steps.version.outputs.VERSION }}
        body: ${{ steps.notes.outputs.RELEASE_NOTES }}
        files: ${{ steps.zip.outputs.ZIP_FILE }}
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Success notification
      run: |
        echo "========================================="
        echo "Release v${{ steps.version.outputs.VERSION }} created successfully!"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.TAG }}"
        echo "ZIP File: ${{ steps.zip.outputs.ZIP_FILE }}"
        echo "========================================="
